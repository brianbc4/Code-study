
=============================================public class BaseResponse======================================================================

    private boolean result;
    private String msg;
    private String time;



=====================================public class LoginResponse extends BaseResponse================================================================
    private Rtn rtn;

    @Getter
    public static class Rtn {
        private String sig;
        private String user;
        private String token;
        private String time;
        private String C_type;
        private String member_id;

    }


=====================================public interface LoginApi===========================================================================================

    @GET("https://openapi.crazymike.tw/?func=appSdkLogin")
    Observable<LoginResponse> login(
            @Query("user") String user,
            @Query("token") String token,
            @Query("c_type") String cType,
            @Query("time") int time,
            @Query("sig") String sig);

/*			
{  
   "result":true,
   "msg":"[1]",
   "time":"2017-08-01 11:33:36",
   "rtn":{  
      "sig":"ZDBmOGI1NzUxMzhjOTI5ZDdiMWQ4YzA2ODc1MDJhOTNhNzIwZjBmYw..",
      "user":"-BOQoigiaT8yValuaQS6W9069Qf3txOiFK2WvTbUjDU.",
      "token":"0h6HkttKegy34LJufhIK2VGlLHOGF_tFE4htMKtTHntUm3SJ5AMebl13m8mZGleQF8Cd1AVQCYddeG",
      "time":"xlC41Kb6qryorRZeVcKAGR88HcUssnvh2U6_0bhPrQE.",
      "C_type":"google",
      "member_id":"WP50ata4wxwEJnmepRN3-Ptj87s8ueknML02X5EK0uo."
   }
}			
*/	
			
			
=====================================================class WebViewPresenter============================================================================

		NetworkService.getInstance().getLoginApi().login(strEmail, strIdToken, strCType, intTime, strSig)
				.compose(RxUtil.mainAsync())
				.subscribe(loginResponse -> {
					String memberId = loginResponse.getRtn().getMember_id();
					String type = loginResponse.getRtn().getC_type();
					String user = loginResponse.getRtn().getUser();
					String sig = loginResponse.getRtn().getSig();
					String time = loginResponse.getRtn().getTime();
					String tokenBack = loginResponse.getRtn().getToken();
							}, throwable -> {
					Log.e(TAG, throwable.toString());
					view.onLoginFailure();
				});
							
							
			
			
			
=====================================public class NetworkService===========================================================================================

public static String CDN;
private final LoginApi loginApi;
private static NetworkService INSTANCE;

public static NetworkService getInstance() {
	return INSTANCE != null ? INSTANCE : (INSTANCE = new NetworkService());
}

private NetworkService() {

		CDN = "https://apicdn.crazymike.tw/index.asp/";

		OkHttpClient client = new OkHttpClient.Builder()
				.addInterceptor(loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY))
				.connectTimeout(TIME_OUT_CONNECT, TimeUnit.SECONDS)
				.readTimeout(TIME_OUT_READ, TimeUnit.SECONDS)
				.writeTimeout(TIME_OUT_WRITE, TimeUnit.SECONDS)
				.cookieJar(CookieRepository.getInstance().getCookieJar())
				.build();


		Retrofit retrofitCDN = new Retrofit.Builder()
				.addCallAdapterFactory(RxJavaCallAdapterFactory.create())
				.addConverterFactory(NonJsonConverterFactory.create())
				.addConverterFactory(GsonConverterFactory.create())				/*Gson*/
				.baseUrl(CDN)
				.client(client)
				.build();
			   
			   
		loginApi = retrofitCDN.create(LoginApi.class);   
}

public LoginApi getLoginApi() {
        return INSTANCE.loginApi;
    }
	
	

							
							
							
							
							
							