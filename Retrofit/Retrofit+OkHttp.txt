

			===================GET==========================

import retrofit2.http.GET;
import retrofit2.http.Query;


public interface Api {
    @GET("/")   //url: https://openapi.crazymike.tw/index.asp/?func=appIndex&channel=5&platform=android&tag=&ver=6
    Observable<AppIndexResponse> callAppIndex(@Query("func") String fun, @Query("channel") String channel, @Query("platform") String platform, @Query("tag") String tag, @Query("ver") int ver);
}


			===================POST========================== 
import retrofit2.http.POST;
import retrofit2.http.Field;
import retrofit2.http.FormUrlEncoded;

public interface AppApi2 {
    @FormUrlEncoded
    @POST(URL.ADD_DEVICE_TOKEN)	   
    Observable<Object> addDeviceToken(@Field("os") String os, @Field("alias") String alias, @Field("token") String token, @Field("userID") String userID, @Field("deviceId") String deviceId);
}



			=====================EX1(無更新資訊)========================== 	

    public void onBannerClick(Banner banner, RotateJson rotateJson) {
        NetworkService.getInstance().getTraceApi().traceClick(
                    FUNC.TRACE,
                    TFUNC.TRACE,
                    TraceQueryFormatter.getBannerTcode(banner, rotateJson),
                    TraceQueryFormatter.getBannerFcode(banner))
                .compose(RxUtil.mainAsync())
                .subscribe(traceResponse -> {}, Throwable::printStackTrace);
    }	

			=====================EX2(有更新資訊)========================== 
			
    public void callAppIndex() {
        ProductRepository.getInstance().callAppIndex("5", "")
                .compose(RxUtil.bindLifecycle(view))
                .compose(RxUtil.mainAsync())
                .subscribe(productRepository -> {

                    view.onGetUpSideMenu(productRepository.getUpSideMenus());
                    view.onGetPromote(productRepository.getPromote());
                    if(ProductRepository.getInstance().hasSpecialLogo()){
                        view.onGetLaunchIcon(productRepository.getChannelInfo().getLogo());
                    }

                }, throwable -> {
                    throwable.printStackTrace();
                    view.onConnectionError();
                });
    }
				

		
				
				